{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2284,"status":"ok","timestamp":1662608554924,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"aeAnAq9AMP_u","outputId":"b34ee92e-56b4-408d-c09b-3534752157a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Cloning into 'image-similarity-deep-ranking'...\n","remote: Enumerating objects: 76, done.\u001b[K\n","remote: Counting objects: 100% (8/8), done.\u001b[K\n","remote: Compressing objects: 100% (3/3), done.\u001b[K\n","remote: Total 76 (delta 6), reused 5 (delta 5), pack-reused 68\u001b[K\n","Unpacking objects: 100% (76/76), done.\n"]}],"source":["# ! git clone https://github.com/akarshzingade/image-similarity-deep-ranking.git"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"fmEclg5dsz_O"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1663132329213,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"JZCTbmm64n1b","outputId":"ad982fdc-e078-4ca1-e04b-7ad47a3e9e90"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking\n"]}],"source":["%cd /content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5943,"status":"ok","timestamp":1663653459541,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"HP44n9SeN1Zu","outputId":"c606e298-3b4d-4cb0-81c0-eecf1616fb2b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting keras==2.3.1\n","  Downloading Keras-2.3.1-py2.py3-none-any.whl (377 kB)\n","\u001b[K     |████████████████████████████████| 377 kB 4.8 MB/s \n","\u001b[?25hRequirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (1.1.2)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (6.0)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (1.21.6)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (3.1.0)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (1.7.3)\n","Collecting keras-applications>=1.0.6\n","  Downloading Keras_Applications-1.0.8-py3-none-any.whl (50 kB)\n","\u001b[K     |████████████████████████████████| 50 kB 7.8 MB/s \n","\u001b[?25hRequirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from keras==2.3.1) (1.15.0)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras==2.3.1) (1.5.2)\n","Installing collected packages: keras-applications, keras\n","  Attempting uninstall: keras\n","    Found existing installation: keras 2.8.0\n","    Uninstalling keras-2.8.0:\n","      Successfully uninstalled keras-2.8.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow 2.8.2+zzzcolab20220719082949 requires keras<2.9,>=2.8.0rc0, but you have keras 2.3.1 which is incompatible.\u001b[0m\n","Successfully installed keras-2.3.1 keras-applications-1.0.8\n"]}],"source":["!pip install keras==2.3.1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"elapsed":2229,"status":"ok","timestamp":1663405635151,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"8c9g2DYRRhCZ","outputId":"49769c80-69c9-48a1-d06f-a6cc44682604"},"outputs":[{"output_type":"stream","name":"stderr","text":["Using TensorFlow backend.\n"]},{"output_type":"execute_result","data":{"text/plain":["'3.1.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}],"source":["import tensorflow as tf\n","tf.__version__\n","\n","import h5py\n","h5py.__version__"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23545,"status":"ok","timestamp":1663653483074,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"XaZMFYoWRids","outputId":"f961f324-cb34-4eb9-b450-c30c605ffed3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: tensorflow 2.8.2+zzzcolab20220719082949\n","Uninstalling tensorflow-2.8.2+zzzcolab20220719082949:\n","  Would remove:\n","    /usr/local/bin/estimator_ckpt_converter\n","    /usr/local/bin/import_pb_to_tensorboard\n","    /usr/local/bin/saved_model_cli\n","    /usr/local/bin/tensorboard\n","    /usr/local/bin/tf_upgrade_v2\n","    /usr/local/bin/tflite_convert\n","    /usr/local/bin/toco\n","    /usr/local/bin/toco_from_protos\n","    /usr/local/lib/python3.7/dist-packages/tensorflow-2.8.2+zzzcolab20220719082949.dist-info/*\n","    /usr/local/lib/python3.7/dist-packages/tensorflow/*\n","Proceed (y/n)? y\n","  Successfully uninstalled tensorflow-2.8.2+zzzcolab20220719082949\n"]}],"source":["! pip uninstall tensorflow"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47659,"status":"ok","timestamp":1663653530730,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"4iufpTxlRkpx","outputId":"36a2597d-2d4e-49b0-a155-e4bc3dbedd28"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow==1.15\n","  Downloading tensorflow-1.15.0-cp37-cp37m-manylinux2010_x86_64.whl (412.3 MB)\n","\u001b[K     |████████████████████████████████| 412.3 MB 22 kB/s \n","\u001b[?25hCollecting gast==0.2.2\n","  Downloading gast-0.2.2.tar.gz (10 kB)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (3.3.0)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.2.0)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.14.1)\n","Requirement already satisfied: keras-applications>=1.0.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.0.8)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (0.2.0)\n","Collecting tensorboard<1.16.0,>=1.15.0\n","  Downloading tensorboard-1.15.0-py3-none-any.whl (3.8 MB)\n","\u001b[K     |████████████████████████████████| 3.8 MB 37.4 MB/s \n","\u001b[?25hRequirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.15.0)\n","Collecting tensorflow-estimator==1.15.1\n","  Downloading tensorflow_estimator-1.15.1-py2.py3-none-any.whl (503 kB)\n","\u001b[K     |████████████████████████████████| 503 kB 64.5 MB/s \n","\u001b[?25hRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.1.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.48.1)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (3.17.3)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.1.2)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (0.8.1)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (0.37.1)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.15) (1.21.6)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras-applications>=1.0.8->tensorflow==1.15) (3.1.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (3.4.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (1.0.1)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (57.4.0)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (4.12.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (4.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.16.0,>=1.15.0->tensorflow==1.15) (3.8.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras-applications>=1.0.8->tensorflow==1.15) (1.5.2)\n","Building wheels for collected packages: gast\n","  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gast: filename=gast-0.2.2-py3-none-any.whl size=7554 sha256=ef1904b043dd083f8244d99497796089c6dba8ad0e875e239489ca06bec44196\n","  Stored in directory: /root/.cache/pip/wheels/21/7f/02/420f32a803f7d0967b48dd823da3f558c5166991bfd204eef3\n","Successfully built gast\n","Installing collected packages: tensorflow-estimator, tensorboard, gast, tensorflow\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.8.0\n","    Uninstalling tensorflow-estimator-2.8.0:\n","      Successfully uninstalled tensorflow-estimator-2.8.0\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.8.0\n","    Uninstalling tensorboard-2.8.0:\n","      Successfully uninstalled tensorboard-2.8.0\n","  Attempting uninstall: gast\n","    Found existing installation: gast 0.5.3\n","    Uninstalling gast-0.5.3:\n","      Successfully uninstalled gast-0.5.3\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow-probability 0.16.0 requires gast>=0.3.2, but you have gast 0.2.2 which is incompatible.\n","kapre 0.3.7 requires tensorflow>=2.0.0, but you have tensorflow 1.15.0 which is incompatible.\u001b[0m\n","Successfully installed gast-0.2.2 tensorboard-1.15.0 tensorflow-1.15.0 tensorflow-estimator-1.15.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting h5py==2.10.0\n","  Downloading h5py-2.10.0-cp37-cp37m-manylinux1_x86_64.whl (2.9 MB)\n","\u001b[K     |████████████████████████████████| 2.9 MB 5.0 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.7/dist-packages (from h5py==2.10.0) (1.21.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from h5py==2.10.0) (1.15.0)\n","Installing collected packages: h5py\n","  Attempting uninstall: h5py\n","    Found existing installation: h5py 3.1.0\n","    Uninstalling h5py-3.1.0:\n","      Successfully uninstalled h5py-3.1.0\n","Successfully installed h5py-2.10.0\n"]}],"source":["! pip install tensorflow==1.15\n","!pip install h5py==2.10.0"]},{"cell_type":"markdown","source":["#커널 다시 시작 후 여기서부터"],"metadata":{"id":"Di6LADUW_uzd"}},{"cell_type":"code","source":["%cd /content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking"],"metadata":{"id":"NnM0PeRr_poo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663405720685,"user_tz":-540,"elapsed":9,"user":{"displayName":"성민제","userId":"17141149487272394423"}},"outputId":"9e28fd05-2829-4d67-9e62-d895e90859b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking\n"]}]},{"cell_type":"markdown","source":["# sampler 파일 생성할때만 실행"],"metadata":{"id":"-1GnK6pT_5p7"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1620,"status":"ok","timestamp":1662833932200,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"JMxmCtsyQBTX","outputId":"2ac4d4e5-c8c2-4618-d955-d6fa6c7be4fe"},"outputs":[{"name":"stdout","output_type":"stream","text":["Input Directory: /content/drive/MyDrive/similar/class/\n","Output Directory: tripletTxt/\n","Number of Positive image per Query image: 4\n","Number of Negative image per Query image: 6\n"]}],"source":["# !python tripletSampler.py --input_directory /content/drive/MyDrive/similar/class/ --output_directory tripletTxt/ --num_pos_images 4 --num_neg_images 6"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4aEFpXvm8Yd6","executionInfo":{"status":"ok","timestamp":1662873975665,"user_tz":-540,"elapsed":8589713,"user":{"displayName":"성민제","userId":"17141149487272394423"}},"outputId":"4c73dad2-22df-43e6-b37c-3a0f112c0de3"},"outputs":[{"output_type":"stream","name":"stdout","text":["input_10 (None, None, None, 3)\n","block1_conv1 (None, None, None, 64)\n","block1_conv2 (None, None, None, 64)\n","block1_pool (None, None, None, 64)\n","block2_conv1 (None, None, None, 128)\n","block2_conv2 (None, None, None, 128)\n","block2_pool (None, None, None, 128)\n","block3_conv1 (None, None, None, 256)\n","block3_conv2 (None, None, None, 256)\n","block3_conv3 (None, None, None, 256)\n","block3_pool (None, None, None, 256)\n","block4_conv1 (None, None, None, 512)\n","block4_conv2 (None, None, None, 512)\n","block4_conv3 (None, None, None, 512)\n","block4_pool (None, None, None, 512)\n","block5_conv1 (None, None, None, 512)\n","block5_conv2 (None, None, None, 512)\n","block5_conv3 (None, None, None, 512)\n","block5_pool (None, None, None, 512)\n","input_11 (None, 256, 256, 3)\n","input_12 (None, 256, 256, 3)\n","global_average_pooling2d_4 (None, 512)\n","conv2d_7 (None, 16, 16, 96)\n","conv2d_8 (None, 8, 8, 96)\n","dense_10 (None, 4096)\n","max_pooling2d_7 (None, 4, 4, 96)\n","max_pooling2d_8 (None, 4, 4, 96)\n","dropout_7 (None, 4096)\n","flatten_7 (None, 1536)\n","flatten_8 (None, 1536)\n","dense_11 (None, 4096)\n","lambda_14 (None, 1536)\n","lambda_15 (None, 1536)\n","dropout_8 (None, 4096)\n","concatenate_7 (None, 3072)\n","lambda_13 (None, 4096)\n","concatenate_8 (None, 7168)\n","dense_12 (None, 4096)\n","lambda_16 (None, 4096)\n","Found 1600 images belonging to 8 classes.\n","Epoch 1/50\n","314/314 [==============================] - 545s 2s/step - loss: 0.8687\n","Epoch 2/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/callbacks/callbacks.py:707: RuntimeWarning: Can save best model only with val_loss available, skipping.\n","  'skipping.' % (self.monitor), RuntimeWarning)\n"]},{"output_type":"stream","name":"stdout","text":["314/314 [==============================] - 477s 2s/step - loss: 0.9331\n","Epoch 3/50\n","314/314 [==============================] - 411s 1s/step - loss: 0.8125\n","Epoch 4/50\n","314/314 [==============================] - 461s 1s/step - loss: 0.8028\n","Epoch 5/50\n","314/314 [==============================] - 463s 1s/step - loss: 0.8253\n","Epoch 6/50\n","314/314 [==============================] - 457s 1s/step - loss: 0.9770\n","Epoch 7/50\n","314/314 [==============================] - 482s 2s/step - loss: 0.8846\n","Epoch 8/50\n","314/314 [==============================] - 563s 2s/step - loss: 0.6998\n","Epoch 9/50\n","314/314 [==============================] - 500s 2s/step - loss: 0.8381\n","Epoch 10/50\n","314/314 [==============================] - 426s 1s/step - loss: 1.0011\n","Epoch 11/50\n","314/314 [==============================] - 443s 1s/step - loss: 0.9566\n","Epoch 12/50\n","314/314 [==============================] - 462s 1s/step - loss: 0.9703\n","Epoch 13/50\n","314/314 [==============================] - 469s 1s/step - loss: 0.9559\n","Epoch 14/50\n","314/314 [==============================] - 429s 1s/step - loss: 0.9539\n","Epoch 15/50\n","314/314 [==============================] - 548s 2s/step - loss: 0.9979\n","Epoch 16/50\n","314/314 [==============================] - 558s 2s/step - loss: 0.9330\n","Epoch 17/50\n","314/314 [==============================] - 462s 1s/step - loss: 0.9471\n","Epoch 18/50\n","314/314 [==============================] - 413s 1s/step - loss: 0.7116\n","Epoch 00018: early stopping\n"]}],"source":["# coding: utf-8\n","\n","from  __future__ import absolute_import\n","from __future__ import print_function\n","from ImageDataGeneratorCustom import ImageDataGeneratorCustom\n","import numpy as np\n","from keras.applications.vgg16 import VGG16\n","from keras.layers import *\n","from keras.models import Model, load_model\n","from keras.optimizers import SGD\n","from keras.preprocessing.image import load_img, img_to_array\n","import tensorflow as tf\n","from keras import backend as K\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","config = tf.ConfigProto()\n","config.gpu_options.allow_growth=True\n","sess = tf.Session(config=config)\n","K.set_session(sess)\n","\n","def convnet_model_():\n","    vgg_model = VGG16(weights=None, include_top=False)\n","    x = vgg_model.output\n","    x = GlobalAveragePooling2D()(x)\n","    x = Dense(4096, activation='relu')(x)\n","    x = Dropout(0.6)(x)\n","    x = Dense(4096, activation='relu')(x)\n","    x = Dropout(0.6)(x)\n","    x = Lambda(lambda  x_: K.l2_normalize(x,axis=1))(x)\n","    convnet_model = Model(inputs=vgg_model.input, outputs=x)\n","    return convnet_model\n","\n","def deep_rank_model():\n","\n","    convnet_model = convnet_model_()\n","    first_input = Input(shape=(256,256,3))\n","    first_conv = Conv2D(96, kernel_size=(8, 8),strides=(16,16), padding='same')(first_input)\n","    first_max = MaxPool2D(pool_size=(3,3),strides = (4,4),padding='same')(first_conv)\n","    first_max = Flatten()(first_max)\n","    first_max = Lambda(lambda  x: K.l2_normalize(x,axis=1))(first_max)\n","\n","    second_input = Input(shape=(256,256,3))\n","    second_conv = Conv2D(96, kernel_size=(8, 8),strides=(32,32), padding='same')(second_input)\n","    second_max = MaxPool2D(pool_size=(7,7),strides = (2,2),padding='same')(second_conv)\n","    second_max = Flatten()(second_max)\n","    second_max = Lambda(lambda  x: K.l2_normalize(x,axis=1))(second_max)\n","\n","    merge_one = concatenate([first_max, second_max])\n","\n","    merge_two = concatenate([merge_one, convnet_model.output])\n","    emb = Dense(4096)(merge_two)\n","    l2_norm_final = Lambda(lambda  x: K.l2_normalize(x,axis=1))(emb)\n","\n","    final_model = Model(inputs=[first_input, second_input, convnet_model.input], outputs=l2_norm_final)\n","\n","    return final_model\n","\n","\n","deep_rank_model = deep_rank_model()\n","\n","for layer in deep_rank_model.layers:\n","    print (layer.name, layer.output_shape)\n","\n","model_path = \"/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking/model_path/\"\n","\n","class DataGenerator(object):\n","    def __init__(self, params, target_size=(256, 256)):\n","        self.params = params\n","        self.target_size = target_size\n","        self.idg = ImageDataGeneratorCustom(**params)\n","\n","    def get_train_generator(self, batch_size):\n","        return self.idg.flow_from_directory(\"/content/drive/MyDrive/similar/class/\",\n","                                            batch_size=batch_size,\n","                                            target_size=self.target_size,shuffle=False,\n","                                            triplet_path  ='/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking/tripletTxt/triplets.txt'\n","                                           )\n","\n","    def get_test_generator(self, batch_size):\n","        return self.idg.flow_from_directory(\"/content/drive/MyDrive/similar/class/\",\n","                                            batch_size=batch_size,\n","                                            target_size=self.target_size, shuffle=False,\n","                                            triplet_path  =\"/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking/tripletTxt/triplets.txt\"                                        )\n","\n","\n","\n","dg = DataGenerator({\n","    \"rescale\": 1. / 255,\n","    \"horizontal_flip\": True,\n","    \"vertical_flip\": True,\n","    \"zoom_range\": 0.2,\n","    \"shear_range\": 0.2,\n","    \"rotation_range\": 30,\n","\"fill_mode\": 'nearest' \n","}, target_size=(256, 256))\n","\n","batch_size = 16\n","batch_size *= 3\n","train_generator = dg.get_train_generator(batch_size)\n","\n","\n","_EPSILON = K.epsilon()\n","def _loss_tensor(y_true, y_pred):\n","    y_pred = K.clip(y_pred, _EPSILON, 1.0-_EPSILON)\n","    loss =  tf.convert_to_tensor(0,dtype=tf.float32)\n","    g = tf.constant(1.0, shape=[1], dtype=tf.float32)\n","    for i in range(0,batch_size,3):\n","        try:\n","            q_embedding = y_pred[i+0]\n","            p_embedding =  y_pred[i+1]\n","            n_embedding = y_pred[i+2]\n","            D_q_p =  K.sqrt(K.sum((q_embedding - p_embedding)**2))\n","            D_q_n = K.sqrt(K.sum((q_embedding - n_embedding)**2))\n","            loss = (loss + g + D_q_p - D_q_n )            \n","        except:\n","            continue\n","    loss = loss/(batch_size/3)\n","    zero = tf.constant(0.0, shape=[1], dtype=tf.float32)\n","    return tf.maximum(loss,zero)\n","\n","#deep_rank_model.load_weights('deepranking.h5')\n","deep_rank_model.compile(loss=_loss_tensor, optimizer=SGD(lr=0.001, momentum=0.9, nesterov=True))\n","\n","\n","train_steps_per_epoch = int((15099)/batch_size)\n","train_epocs = 50\n","early_stopping = EarlyStopping(monitor='loss', mode='min', verbose =1, patience = 10)\n","# mc = ModelCheckpoint(model_path+\"best_model.h5\", monitor = \"val_loss\",mode='min', save_best_only=True)\n","deep_rank_model.fit_generator(train_generator,\n","                        steps_per_epoch=train_steps_per_epoch,\n","                        epochs=train_epocs , callbacks = [early_stopping]\n","                       )\n","\n","model_path2 = \"/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking/model_path/deepranking_test_early.h5\"\n","deep_rank_model.save_weights(model_path2)\n","#f = open('deepranking.json','w')\n","#f.write(deep_rank_model.to_json())\n","#f.close()\n"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":360,"status":"ok","timestamp":1663653441131,"user":{"displayName":"성민제","userId":"17141149487272394423"},"user_tz":-540},"id":"1QJ9El9COMt2"},"outputs":[],"source":["# !python deepranking_get_distance.py --model model_path/deepranking_test_early.h5 --image1 ../../similar/1188997_20211222_1_1_a1_1_2_13_3_196.jpg --image2 ../../similar/1179553_20211220_1_1_a2_1_2_13_3_176.jpg"]},{"cell_type":"markdown","source":["# 내사진과 비교할 사진 리스트 랜덤하게 리스트로 뽑아내기"],"metadata":{"id":"Z500f-lLAZjB"}},{"cell_type":"code","source":["import os, re\n","def list_pictures(directory, ext='jpg|jpeg|bmp|png|ppm'):\n","    return [os.path.join(root, f)\n","            for root, _, files in os.walk(directory) for f in files\n","            if re.match(r'([\\w]+\\.(?:' + ext + '))', f)]\n","\n","path = \"/content/drive/MyDrive/similar/class/\"\n","classes = [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]\n","all_images = []\n","\n","for class_ in classes:\n","    image_names = list_pictures(os.path.join(path,class_))\n","    for image_name in image_names:\n","        all_images.append(image_name)"],"metadata":{"id":"Var4RXNJpQmH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import random\n","total= random.sample(all_images,10)"],"metadata":{"id":"kAi1b_9PqTH-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["total # 비교할 사진 리스트 10개"],"metadata":{"id":"1l323haC0nRH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os \n","tanzer =os.listdir(\"/content/drive/MyDrive/similar/class/class0\") \n","white = os.listdir(\"/content/drive/MyDrive/similar/class/class1\")\n","n =os.listdir(\"/content/drive/MyDrive/similar/class/class2\")\n","p= os.listdir(\"/content/drive/MyDrive/similar/class/class3\")\n","k=os.listdir(\"/content/drive/MyDrive/similar/class/class4\")\n","cal=os.listdir(\"/content/drive/MyDrive/similar/class/class5\")\n","gray=os.listdir(\"/content/drive/MyDrive/similar/class/class6\")\n","nogyun=os.listdir(\"/content/drive/MyDrive/similar/class/class8\")"],"metadata":{"id":"r8JIycv8p0TB","executionInfo":{"status":"ok","timestamp":1663658039336,"user_tz":-540,"elapsed":306,"user":{"displayName":"성민제","userId":"17141149487272394423"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":["# 유사도 거리 측정"],"metadata":{"id":"rd2wbO5bA60T"}},{"cell_type":"code","source":["import numpy as np\n","from keras.applications.vgg16 import VGG16\n","from keras.layers import *\n","from keras.models import Model\n","from keras.preprocessing.image import load_img, img_to_array\n","from skimage import transform\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Flatten\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras.layers import Embedding\n","from keras import backend as K\n","\n","def convnet_model_():\n","    vgg_model = VGG16(weights=None, include_top=False)\n","    x = vgg_model.output\n","    x = GlobalAveragePooling2D()(x)\n","    x = Dense(4096, activation='relu')(x)\n","    x = Dropout(0.6)(x)\n","    x = Dense(4096, activation='relu')(x)\n","    x = Dropout(0.6)(x)\n","    x = Lambda(lambda  x_: K.l2_normalize(x,axis=1))(x)\n","    convnet_model = Model(inputs=vgg_model.input, outputs=x)\n","    return convnet_model\n","\n","def deep_rank_model():\n"," \n","    convnet_model = convnet_model_()\n","    first_input = Input(shape=(256,256,3))\n","    first_conv = Conv2D(96, kernel_size=(8, 8),strides=(16,16), padding='same')(first_input)\n","    first_max = MaxPool2D(pool_size=(3,3),strides = (4,4),padding='same')(first_conv)\n","    first_max = Flatten()(first_max)\n","    first_max = Lambda(lambda  x: K.l2_normalize(x,axis=1))(first_max)\n","\n","    second_input = Input(shape=(256,256,3))\n","    second_conv = Conv2D(96, kernel_size=(8, 8),strides=(32,32), padding='same')(second_input)\n","    second_max = MaxPool2D(pool_size=(7,7),strides = (2,2),padding='same')(second_conv)\n","    second_max = Flatten()(second_max)\n","    second_max = Lambda(lambda  x: K.l2_normalize(x,axis=1))(second_max)\n","\n","    merge_one = concatenate([first_max, second_max])\n","\n","    merge_two = concatenate([merge_one, convnet_model.output])\n","    emb = Dense(4096)(merge_two)\n","    l2_norm_final = Lambda(lambda  x: K.l2_normalize(x,axis=1))(emb)\n","\n","    final_model = Model(inputs=[first_input, second_input, convnet_model.input], outputs=l2_norm_final)\n","\n","    return final_model\n","\n","\n","model1 = \"/content/drive/MyDrive/deep-ranking/image-similarity-deep-ranking/model_path/deepranking_test_early.h5\"  \n","image5 =\"/content/drive/MyDrive/similar/input_image/371230_20210927_4_1_a4_3_2_11_2_ 23.jpg\"\n","\n","\n","model = deep_rank_model()\n","\n","# for layer in model.layers:\n","#     print (layer.name, layer.output_shape)\n","\n","model.load_weights(model1)\n","\n","image1 = load_img(image5)\n","image1 = img_to_array(image1).astype(\"float64\")\n","image1 = transform.resize(image1, (256, 256))\n","image1 *= 1. / 255\n","image1 = np.expand_dims(image1, axis = 0)\n","\n","embedding1 = model.predict([image1, image1, image1])[0]\n","\n","distance_t,image_t = [], []\n","for image2 in white:\n","  image_t.append(os.path.join(\"/content/drive/MyDrive/similar/class/class1/\",image2))\n","  image2 = load_img(os.path.join(\"/content/drive/MyDrive/similar/class/class1/\",image2))\n","  image3 = img_to_array(image2).astype(\"float64\")\n","  image3 = transform.resize(image3, (256, 256))\n","  image3 *= 1. / 255\n","  image3 = np.expand_dims(image3, axis = 0)\n","\n","  embedding2 = model.predict([image3,image3,image3])[0]\n","\n","  distance = sum([(embedding1[idx] - embedding2[idx])**2 for idx in range(len(embedding1))])**(0.5)\n","  print (distance)\n","  # image2_sp = image2.split(\"/\")\n","  # image_t.append(image2_sp[7])\n","  distance_t.append(distance)\n","  \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ubwFTTHkqsaH","executionInfo":{"status":"ok","timestamp":1663658807124,"user_tz":-540,"elapsed":90090,"user":{"displayName":"성민제","userId":"17141149487272394423"}},"outputId":"1f6cb984-712f-42b5-f7c3-5416589823f4"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["0.14223002682504637\n","1.4076823505061486\n","1.569052544263664\n","0.14325821053535373\n","0.19321158251564152\n","1.397006204895864\n","1.5468057702088012\n","0.6349208913936486\n","1.5447432341871428\n","0.13298464447236522\n","0.18700484861257421\n","0.26637472549068725\n","0.09542333878062738\n","1.6136361114829432\n","0.10598881665006847\n","0.22843447034964945\n","0.13346350505425253\n","0.12688845743845967\n","0.15056148088056473\n","0.18355276330464657\n","0.7931009374347783\n","0.43420449924133075\n","0.11582805167490326\n","1.2690944320474278\n","0.11376665546269168\n","0.12856560723164753\n","0.09916140739563013\n","0.2028156863100667\n","0.1355099068153307\n","0.1297768694480015\n","0.13734684572459593\n","1.5699628044598228\n","0.1901206612588547\n","0.29373393737899206\n","0.13311912818858068\n","0.691388101881343\n","0.1528573466181138\n","0.1220326698574858\n","1.5787746049183677\n","0.09881271587391065\n","0.17046458925034066\n","0.7139374454191713\n","0.6223501024357014\n","0.24273754292653207\n","0.12112530342763973\n","0.2175074970513156\n","0.1281868645015465\n","0.2134760799400307\n","0.20246867050346493\n","0.13967074199620746\n","0.1292193449384106\n","1.2203228328130404\n","1.4273180743295772\n","0.20334696974707\n","0.16116773603170884\n","0.15696646613791185\n","0.25374571114454175\n","0.15223892407674777\n","0.16068727460769097\n","0.14129146220418248\n","0.11283133272197675\n","0.20499453495267858\n","0.1321850025143876\n","0.19802432269652598\n","0.1277287176593469\n","0.15517038006453818\n","1.5834002134529477\n","0.09066553959573417\n","0.1529573032627804\n","0.36717678406592835\n","0.503436477689477\n","0.1306128134234877\n","0.17728922606751932\n","0.1292360548067721\n","0.09255689236467605\n","0.15959551240698172\n","1.567092406716624\n","1.4456888244320967\n","0.1711875390335913\n","0.13470534196328274\n","0.11277562790449393\n","0.11394388549525783\n","0.3407871635173596\n","0.25035203470630474\n","0.8378208570018166\n","0.5697483151241186\n","1.5645284407650304\n","0.13616618382441548\n","0.10031982256236932\n","0.13611957546699996\n","0.11049847870438703\n","0.1265828522615763\n","0.25614328604086517\n","0.1629263071566553\n","0.21707532276385208\n","0.3197468943861902\n","0.09425490583952514\n","0.12580728560633847\n","0.15542000726939387\n","0.17188743229530756\n","1.4188296009353452\n","0.1633464390137689\n","0.2008543737687853\n","0.4129597154071718\n","0.10256139133263145\n","0.17408130371473904\n","0.09338820712419761\n","0.33251835252237333\n","1.3791677083371792\n","1.4382289943349682\n","0.17616212817549845\n","0.10895429643001772\n","0.14790826280324282\n","0.10760968666796412\n","0.1317214085284237\n","1.5605910162395835\n","0.48538102590616905\n","0.31163209655289814\n","0.11923648367867334\n","1.59330777791475\n","1.609983404179027\n","0.16515743563449528\n","0.12209016822751488\n","1.4881531567540043\n","0.09458394112285648\n","0.14808348450563721\n","0.16765774391519725\n","0.2542038718861674\n","0.12344754397793582\n","0.18217099011000562\n","0.21344862084462823\n","0.15052705208600464\n","1.5737079020662221\n","1.133375105897339\n","1.0533992105150947\n","0.1345746502746679\n","0.33250948413574144\n","0.1037823000876325\n","1.5670942242148587\n","0.09876895706435553\n","0.19047502942959307\n","0.15974407527193069\n","0.12056532787335873\n","0.2577487692612541\n","0.1737265666193331\n","1.6088164879544418\n","0.9413664309426891\n","0.21541274487223294\n","0.108268497704285\n","0.20150158622543177\n","0.17565315731652634\n","1.2509469684576306\n","0.13833266781815087\n","0.1504007802540108\n","0.18996868276042325\n","0.17910269444109989\n","0.2624309113566293\n","1.4850509745651217\n","0.1070398986091917\n","1.4900149311555597\n","0.13569759448320112\n","1.597693379371717\n","0.11247582785305973\n","0.10342481581925048\n","1.1781610572744432\n","0.1739309140564433\n","0.31294709727452824\n","0.5164641217505199\n","0.3014065096529629\n","0.16871586563060587\n","0.2238179680448528\n","0.12269259487679249\n","0.16786338130634293\n","0.32091444245863804\n","0.37217298190088766\n","0.17547540505554934\n","0.1786444439998801\n","1.5392010351449317\n","0.11530649792280241\n","0.13947020682281094\n","0.12398499972871364\n","0.1547144894148783\n","0.18124581106332122\n","0.17728796342413\n","0.104413801784991\n","0.23507988557480242\n","0.17011145798667177\n","0.11339978533865926\n","1.4911285693534386\n","0.10103778074319142\n","0.1693094418801572\n","0.10506850117406705\n","0.12323288928537726\n","0.15464940991145013\n","0.12751029706520273\n","1.3970884177019294\n","0.2067300948707806\n","1.470957346954012\n","0.4713319018421133\n","0.188413414832015\n"]}]},{"cell_type":"markdown","source":["# 거리 dataframe으로 저장 및 거리순으로 정렬(오름차순)"],"metadata":{"id":"2npsgHtaBA-y"}},{"cell_type":"code","source":["import pandas as pd\n","metadata = pd.DataFrame({\"id\":image_t, \"distance\": distance_t})"],"metadata":{"id":"QzC9lXnXr1o-","executionInfo":{"status":"ok","timestamp":1663658811078,"user_tz":-540,"elapsed":316,"user":{"displayName":"성민제","userId":"17141149487272394423"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["metadata.sort_values(\"distance\", inplace=True)\n","metadata.reset_index(drop=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"SxK_rj5psNNx","executionInfo":{"status":"ok","timestamp":1663658812134,"user_tz":-540,"elapsed":6,"user":{"displayName":"성민제","userId":"17141149487272394423"}},"outputId":"23254d9f-f7bb-4c7f-be7d-8e9829e422ba"},"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    id  distance\n","0    /content/drive/MyDrive/similar/class/class1/39...  0.090666\n","1    /content/drive/MyDrive/similar/class/class1/34...  0.092557\n","2    /content/drive/MyDrive/similar/class/class1/37...  0.093388\n","3    /content/drive/MyDrive/similar/class/class1/35...  0.094255\n","4    /content/drive/MyDrive/similar/class/class1/38...  0.094584\n","..                                                 ...       ...\n","195  /content/drive/MyDrive/similar/class/class1/11...  1.593308\n","196  /content/drive/MyDrive/similar/class/class1/11...  1.597693\n","197  /content/drive/MyDrive/similar/class/class1/11...  1.608816\n","198  /content/drive/MyDrive/similar/class/class1/11...  1.609983\n","199  /content/drive/MyDrive/similar/class/class1/11...  1.613636\n","\n","[200 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-1a13ed2c-faf8-41f7-950e-04f3864989a2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/39...</td>\n","      <td>0.090666</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/34...</td>\n","      <td>0.092557</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/37...</td>\n","      <td>0.093388</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/35...</td>\n","      <td>0.094255</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/38...</td>\n","      <td>0.094584</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/11...</td>\n","      <td>1.593308</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/11...</td>\n","      <td>1.597693</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/11...</td>\n","      <td>1.608816</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/11...</td>\n","      <td>1.609983</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>/content/drive/MyDrive/similar/class/class1/11...</td>\n","      <td>1.613636</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a13ed2c-faf8-41f7-950e-04f3864989a2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1a13ed2c-faf8-41f7-950e-04f3864989a2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1a13ed2c-faf8-41f7-950e-04f3864989a2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","source":["# 유사한 이미지부터 출력"],"metadata":{"id":"sapnxXiBBJip"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import sys\n","\n","image5 = load_img(image5)\n","plt.imshow(image5)\n","plt.show()\n","print(\"original```````````````\")\n","\n","for i in range(len(white)):\n","  image = load_img('{}'.format(metadata['id'].values[i]))\n","  plt.imshow(image)\n","  plt.show()\n","  print('Image Category: {}'.format(metadata['id'].values[i]))\n","  print('Euclidean Distance: {}'.format(metadata['distance'].values[i]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Kb70xe0g3BzmGfxfvqd6832J0z2EVUop"},"id":"wQhadHcqtvJq","executionInfo":{"status":"error","timestamp":1663658825635,"user_tz":-540,"elapsed":10501,"user":{"displayName":"성민제","userId":"17141149487272394423"}},"outputId":"c47ea725-7a42-4633-cb74-d269620c9da4"},"execution_count":93,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","provenance":[{"file_id":"1L31zmAnkiHy1G9KyOhRx-ofZNUseMybm","timestamp":1663393575417}],"mount_file_id":"1JwBvjLhSEhXaBX49N4Z2oumrjmX1V9c0","authorship_tag":"ABX9TyO6EQ7KeDjgCDUbbgXRn95S"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}